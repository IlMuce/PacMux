name: CI

on:
  push:
    branches: [CorrezionePreEsame]
  pull_request:
    branches: [main]

defaults:
  run:
    shell: bash

jobs:
  superbuild:
    name: ${{ matrix.platform.name }} ${{ matrix.config.name }}
    runs-on: ${{ matrix.platform.os }}

    strategy:
      fail-fast: false
      matrix:
        platform:
        - { name: Windows VS2022, os: windows-2022 }
        - { name: Windows VS2025, os: windows-2025 }
        - { name: Linux GCC,      os: ubuntu-latest }
        - { name: Linux Clang,    os: ubuntu-latest, flags: -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ }
        - { name: macOS,          os: macos-14 }
        config:
        - { name: Shared, flags: -DBUILD_SHARED_LIBS=TRUE }
        - { name: Static, flags: -DBUILD_SHARED_LIBS=FALSE }

    steps:
      - name: Install Linux Dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libxrandr-dev libxcursor-dev libxi-dev libudev-dev \
            libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev libfreetype-dev \
            xvfb

      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure superbuild
        run: |
          echo "::group::Configure superbuild"
          cmake -B build ${{ matrix.platform.flags }} ${{ matrix.config.flags }} -DCMAKE_BUILD_TYPE=Release
          echo "::endgroup::"

      # Build each release as a separate step for clear PASS/FAIL and compact logs
      - name: Build PacMux-0.1.0
        id: build_0_1_0
        continue-on-error: true
        run: |
          echo "::group::Build PacMux-0.1.0"
          cmake --build build --config Release --parallel --target PacMux_0_1_0
          echo "::endgroup::"

      - name: Build PacMux-0.2.0
        id: build_0_2_0
        continue-on-error: true
        run: |
          echo "::group::Build PacMux-0.2.0"
          cmake --build build --config Release --parallel --target PacMux_0_2_0
          echo "::endgroup::"

      - name: Build PacMux-0.3.0
        id: build_0_3_0
        continue-on-error: true
        run: |
          echo "::group::Build PacMux-0.3.0"
          cmake --build build --config Release --parallel --target PacMux_0_3_0
          echo "::endgroup::"

      - name: Build PacMux-0.4.0
        id: build_0_4_0
        continue-on-error: true
        run: |
          echo "::group::Build PacMux-0.4.0"
          cmake --build build --config Release --parallel --target PacMux_0_4_0
          echo "::endgroup::"

      - name: Build PacMux-0.5.0
        id: build_0_5_0
        continue-on-error: true
        run: |
          echo "::group::Build PacMux-0.5.0"
          cmake --build build --config Release --parallel --target PacMux_0_5_0
          echo "::endgroup::"

      - name: Build PacMux-0.6.0
        id: build_0_6_0
        continue-on-error: true
        run: |
          echo "::group::Build PacMux-0.6.0"
          cmake --build build --config Release --parallel --target PacMux_0_6_0
          echo "::endgroup::"

      - name: Build PacMux-0.7.0
        id: build_0_7_0
        continue-on-error: true
        run: |
          echo "::group::Build PacMux-0.7.0"
          cmake --build build --config Release --parallel --target PacMux_0_7_0
          echo "::endgroup::"

      - name: Build PacMux-0.8.0
        id: build_0_8_0
        continue-on-error: true
        run: |
          echo "::group::Build PacMux-0.8.0"
          cmake --build build --config Release --parallel --target PacMux_0_8_0
          echo "::endgroup::"

      - name: Build PacMux-0.9.0
        id: build_0_9_0
        continue-on-error: true
        run: |
          echo "::group::Build PacMux-0.9.0"
          cmake --build build --config Release --parallel --target PacMux_0_9_0
          echo "::endgroup::"

      - name: Build PacMux-1.0.0
        id: build_1_0_0
        continue-on-error: true
        run: |
          echo "::group::Build PacMux-1.0.0"
          cmake --build build --config Release --parallel --target PacMux_1_0_0
          echo "::endgroup::"

      - name: Build PacMux-1.1.0
        id: build_1_1_0
        continue-on-error: true
        run: |
          echo "::group::Build PacMux-1.1.0"
          cmake --build build --config Release --parallel --target PacMux_1_1_0
          echo "::endgroup::"

      - name: Build PacMux-1.2.0
        id: build_1_2_0
        continue-on-error: true
        run: |
          echo "::group::Build PacMux-1.2.0"
          cmake --build build --config Release --parallel --target PacMux_1_2_0
          echo "::endgroup::"

      - name: macOS RPATH validation (pre-smoke)
        if: runner.os == 'macOS'
        run: |
          set -e
          versions=("0.1.0" "0.2.0" "0.3.0" "0.4.0" "0.5.0" "0.6.0" "0.7.0" "0.8.0" "0.9.0" "1.0.0")
          exes=(PacmanR1 PacmanR2 PacmanR2 PacmanR4 PacmanR5 PacmanR6 PacmanR7 PacmanR8 PacmanR9 PacmanR10)
          missing=0
          for i in "${!versions[@]}"; do
            dir="build/PacMux-${versions[$i]}-build"
            exe="$dir/${exes[$i]}"
            if [ -f "$exe" ]; then
              if ! otool -l "$exe" | grep -A2 LC_RPATH | grep -q '@loader_path'; then
                echo "RPATH mancante (@loader_path) in $exe"; missing=1
              fi
            else
              echo "Salto: eseguibile non trovato $exe"
            fi
          done
          if [ $missing -ne 0 ]; then echo "Errore: alcune release legacy non hanno RPATH"; exit 1; fi

      - name: macOS verify built executables (pre-RPATH)
        if: runner.os == 'macOS'
        run: |
          set -e
          versions=("0.1.0" "0.2.0" "0.3.0" "0.4.0" "0.5.0" "0.6.0" "0.7.0" "0.8.0" "0.9.0" "1.0.0")
          exes=(PacmanR1 PacmanR2 PacmanR2 PacmanR4 PacmanR5 PacmanR6 PacmanR7 PacmanR8 PacmanR9 PacmanR10)
          fail=0
          for i in "${!versions[@]}"; do
            dir="build/PacMux-${versions[$i]}-build"
            exe="$dir/${exes[$i]}"
            if [ ! -f "$exe" ]; then
              echo "[MISS] $exe"
              if [ -f "$dir/CMakeFiles/CMakeError.log" ]; then
                echo "-- CMakeError.log (tail) --"; tail -n 40 "$dir/CMakeFiles/CMakeError.log" || true
              fi
              if [ -f "$dir/CMakeFiles/CMakeOutput.log" ]; then
                echo "-- CMakeOutput.log (tail) --"; tail -n 40 "$dir/CMakeFiles/CMakeOutput.log" || true
              fi
              fail=1
            else
              echo "[OK] $exe"
            fi
          done
          if [ $fail -ne 0 ]; then echo "Executables mancanti nelle versioni legacy"; exit 1; fi

      - name: macOS dylib presence check
        # Solo build condivise. Accetta sia filename con sola major (.3.dylib) sia full version (.3.X.Y.dylib) sia senza suffisso.
        if: runner.os == 'macOS' && matrix.config.name == 'Shared'
        run: |
          set -e
          versions=("0.1.0" "0.4.0" "0.8.0" "1.0.0")
          exes=(PacmanR1 PacmanR4 PacmanR8 PacmanR10)
          missing=0
          for i in "${!versions[@]}"; do
            dir="build/PacMux-${versions[$i]}-build"
            exe="$dir/${exes[$i]}"
            [ -f "$exe" ] || continue
            for base in graphics window system; do
              found=0
              for candidate in \
                "$dir/libsfml-${base}.3.dylib" \
                $dir/libsfml-${base}.3.*.dylib \
                "$dir/libsfml-${base}.dylib"; do
                  if [ -f "$candidate" ]; then found=1; break; fi
              done
              if [ $found -eq 0 ]; then
                echo "Manca libsfml-${base}(.3|.3.*|.dylib) accanto a ${exes[$i]}"
                missing=1
              else
                echo "OK libsfml-${base} per ${exes[$i]}"
              fi
            done
          done
          if [ $missing -ne 0 ]; then echo "Errore: mancano dylib in alcune cartelle"; exit 1; fi

      - name: macOS strict run (no DYLD_LIBRARY_PATH, capture libs)
        if: runner.os == 'macOS'
        run: |
          set -e
          export DYLD_LIBRARY_PATH="" # forza uso RPATH
          versions=("0.1.0" "0.4.0" "0.8.0" "1.0.0")
          exes=(PacmanR1 PacmanR4 PacmanR8 PacmanR10)
          for i in "${!versions[@]}"; do
            dir="build/PacMux-${versions[$i]}-build"
            exe="$dir/${exes[$i]}"
            if [ -f "$exe" ]; then
              echo "-- Avvio test DYLD libs ${exes[$i]} --"
              ( DYLD_PRINT_LIBRARIES=1 "$exe" & pid=$!; sleep 2; if kill -0 $pid 2>/dev/null; then kill $pid; echo OK; else echo "Exited early"; fi ) 2>&1 | head -n 40
            fi
          done

      - name: Smoke run 1.2.0 (Linux, 5s)
        id: smoke_linux
        continue-on-error: true
        if: runner.os == 'Linux'
        working-directory: build/PacMux-1.2.0-build
        run: |
          mkdir -p assets && cp -r ../../PacMux-1.2.0/assets/* assets/
          if [ -f PacmanR12 ]; then \
            xvfb-run -a bash -lc 'timeout 5s ./PacmanR12; rc=$?; if [ $rc -eq 0 ]; then echo "Exited too early"; exit 1; elif [ $rc -eq 124 ]; then exit 0; else exit $rc; fi'; \
          fi

      - name: Smoke run 1.2.0 (Windows, 5s)
        id: smoke_windows
        continue-on-error: true
        if: runner.os == 'Windows'
        working-directory: build/PacMux-1.2.0-build/Release
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          New-Item -ItemType Directory -Force -Path assets | Out-Null
          Copy-Item -Recurse -Force ../../../PacMux-1.2.0/assets/* assets/
          $exe = '.\PacmanR12.exe'
          if (-not (Test-Path $exe)) { throw "Eseguibile non trovato: $exe" }
          $p = Start-Process -FilePath $exe -PassThru
          # Attendi massimo 5s: se esce prima => fallisci (probabile crash / DLL)
          Wait-Process -Id $p.Id -Timeout 5 -ErrorAction SilentlyContinue
          if ($p.HasExited) { throw "Il processo Ã¨ terminato prematuramente. ExitCode=$($p.ExitCode)" }
          Stop-Process -Id $p.Id -Force

      - name: Smoke run 1.2.0 (macOS, 5s)
        id: smoke_macos
        continue-on-error: true
        if: runner.os == 'macOS'
        working-directory: build/PacMux-1.2.0-build
        run: |
          mkdir -p assets && cp -r ../../PacMux-1.2.0/assets/* assets/
          if [ -f PacmanR12 ]; then \
            ( ./PacmanR12 & pid=$!; \
              sleep 5; \
              if kill -0 $pid 2>/dev/null; then kill $pid; exit 0; else echo "Exited too early"; exit 1; fi ); \
          fi

      - name: Smoke run ALL versions (Linux, 5s each)
        id: smoke_all_linux
        continue-on-error: true
        if: runner.os == 'Linux'
        run: |
          set -e
          versions=("0.1.0" "0.2.0" "0.3.0" "0.4.0" "0.5.0" "0.6.0" "0.7.0" "0.8.0" "0.9.0" "1.0.0" "1.1.0" "1.2.0")
          fail=0
          for v in "${versions[@]}"; do
            case "$v" in
              "0.1.0") exe=PacmanR1;;
              "0.2.0") exe=PacmanR2;;
              "0.3.0") exe=PacmanR2;;
              "0.4.0") exe=PacmanR4;;
              "0.5.0") exe=PacmanR5;;
              "0.6.0") exe=PacmanR6;;
              "0.7.0") exe=PacmanR7;;
              "0.8.0") exe=PacmanR8;;
              "0.9.0") exe=PacmanR9;;
              "1.0.0") exe=PacmanR10;;
              "1.1.0") exe=PacmanR10;;
              "1.2.0") exe=PacmanR12;;
            esac
            dir="build/PacMux-$v-build"
            if [ -f "$dir/$exe" ]; then
              mkdir -p "$dir/assets"
              cp -r "PacMux-$v/assets"/* "$dir/assets/" 2>/dev/null || true
              pushd "$dir" >/dev/null
              set +e
              xvfb-run -a -s "-screen 0 1024x768x24" bash -lc "timeout 5s ./$exe"
              rc=$?
              set -e
              popd >/dev/null
              if [ $rc -eq 124 ]; then
                echo "OK: $v running for 5s"
              else
                echo "FAIL: $v exited early (rc=$rc)"
                fail=1
              fi
            else
              echo "SKIP: $v executable not found ($dir/$exe)"
            fi
          done
          if [ $fail -ne 0 ]; then exit 1; fi

      - name: Smoke run ALL versions (Windows, 5s each)
        id: smoke_all_windows
        continue-on-error: true
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $versions = @('0.1.0','0.2.0','0.3.0','0.4.0','0.5.0','0.6.0','0.7.0','0.8.0','0.9.0','1.0.0','1.1.0','1.2.0')
          $fail = 0
          foreach ($v in $versions) {
            switch ($v) {
              '0.1.0' { $exe = 'PacmanR1' }
              '0.2.0' { $exe = 'PacmanR2' }
              '0.3.0' { $exe = 'PacmanR2' }
              '0.4.0' { $exe = 'PacmanR4' }
              '0.5.0' { $exe = 'PacmanR5' }
              '0.6.0' { $exe = 'PacmanR6' }
              '0.7.0' { $exe = 'PacmanR7' }
              '0.8.0' { $exe = 'PacmanR8' }
              '0.9.0' { $exe = 'PacmanR9' }
              '1.0.0' { $exe = 'PacmanR10' }
              '1.1.0' { $exe = 'PacmanR10' }
              '1.2.0' { $exe = 'PacmanR12' }
            }
            $dir = "build/PacMux-$v-build/Release"
            $exePath = Join-Path $dir ("$exe.exe")
            if (Test-Path $exePath) {
              New-Item -ItemType Directory -Force -Path (Join-Path $dir 'assets') | Out-Null
              Copy-Item -Recurse -Force (Join-Path "PacMux-$v/assets" '*') (Join-Path $dir 'assets')
              $p = Start-Process -FilePath $exePath -PassThru
              Wait-Process -Id $p.Id -Timeout 5 -ErrorAction SilentlyContinue
              if ($p.HasExited) {
                Write-Host "FAIL: $v exited early (ExitCode=$($p.ExitCode))"
                $fail = 1
              } else {
                Stop-Process -Id $p.Id -Force
                Write-Host "OK: $v running for 5s"
              }
            } else {
              Write-Host "SKIP: $v executable not found ($exePath)"
            }
          }
          if ($fail -ne 0) { exit 1 }

      - name: Smoke run ALL versions (macOS, 5s each)
        id: smoke_all_macos
        continue-on-error: true
        if: runner.os == 'macOS'
        run: |
          set -e
          versions=("0.1.0" "0.2.0" "0.3.0" "0.4.0" "0.5.0" "0.6.0" "0.7.0" "0.8.0" "0.9.0" "1.0.0" "1.1.0" "1.2.0")
          fail=0
          for v in "${versions[@]}"; do
            case "$v" in
              "0.1.0") exe=PacmanR1;;
              "0.2.0") exe=PacmanR2;;
              "0.3.0") exe=PacmanR2;;
              "0.4.0") exe=PacmanR4;;
              "0.5.0") exe=PacmanR5;;
              "0.6.0") exe=PacmanR6;;
              "0.7.0") exe=PacmanR7;;
              "0.8.0") exe=PacmanR8;;
              "0.9.0") exe=PacmanR9;;
              "1.0.0") exe=PacmanR10;;
              "1.1.0") exe=PacmanR10;;
              "1.2.0") exe=PacmanR12;;
            esac
            dir="build/PacMux-$v-build"
            if [ -f "$dir/$exe" ]; then
              mkdir -p "$dir/assets"
              cp -r "PacMux-$v/assets"/* "$dir/assets/" 2>/dev/null || true
              pushd "$dir" >/dev/null
              set +e
              ( ./$exe & pid=$!; sleep 5; if kill -0 $pid 2>/dev/null; then kill $pid; exit 124; else exit 0; fi )
              rc=$?
              set -e
              popd >/dev/null
              if [ $rc -eq 124 ]; then
                echo "OK: $v running for 5s"
              else
                echo "FAIL: $v exited early (rc=$rc)"
                fail=1
              fi
            else
              echo "SKIP: $v executable not found ($dir/$exe)"
            fi
          done
          if [ $fail -ne 0 ]; then exit 1; fi

      - name: Gate (fail job if any build/smoke failed)
        if: always()
        run: |
          fail=0
          # Collect outcomes for builds
          for o in \
            "${{ steps.build_0_1_0.outcome }}" \
            "${{ steps.build_0_2_0.outcome }}" \
            "${{ steps.build_0_3_0.outcome }}" \
            "${{ steps.build_0_4_0.outcome }}" \
            "${{ steps.build_0_5_0.outcome }}" \
            "${{ steps.build_0_6_0.outcome }}" \
            "${{ steps.build_0_7_0.outcome }}" \
            "${{ steps.build_0_8_0.outcome }}" \
            "${{ steps.build_0_9_0.outcome }}" \
            "${{ steps.build_1_0_0.outcome }}" \
            "${{ steps.build_1_1_0.outcome }}" \
            "${{ steps.build_1_2_0.outcome }}"; do
            if [ "$o" != "success" ]; then fail=1; fi
          done
          # Check smoke outcome for this OS
          if [ "${{ runner.os }}" = "Linux" ]; then
            if [ "${{ steps.smoke_linux.outcome }}" != "success" ]; then fail=1; fi
            if [ "${{ steps.smoke_all_linux.outcome }}" != "success" ]; then fail=1; fi
          fi
          if [ "${{ runner.os }}" = "Windows" ]; then
            if [ "${{ steps.smoke_windows.outcome }}" != "success" ]; then fail=1; fi
            if [ "${{ steps.smoke_all_windows.outcome }}" != "success" ]; then fail=1; fi
          fi
          if [ "${{ runner.os }}" = "macOS" ]; then
            if [ "${{ steps.smoke_macos.outcome }}" != "success" ]; then fail=1; fi
            if [ "${{ steps.smoke_all_macos.outcome }}" != "success" ]; then fail=1; fi
          fi
          if [ $fail -ne 0 ]; then echo "Some builds or smoke run failed"; exit 1; fi

      - name: Summary
        if: always()
        run: |
          {
            echo "## Risultati build";
            echo "Platform: ${{ matrix.platform.name }} | Config: ${{ matrix.config.name }}";
            echo "";
            echo "| Versione | Esito |";
            echo "|---|---|";
            echo "| 0.1.0 | ${{ steps.build_0_1_0.outcome }} |";
            echo "| 0.2.0 | ${{ steps.build_0_2_0.outcome }} |";
            echo "| 0.3.0 | ${{ steps.build_0_3_0.outcome }} |";
            echo "| 0.4.0 | ${{ steps.build_0_4_0.outcome }} |";
            echo "| 0.5.0 | ${{ steps.build_0_5_0.outcome }} |";
            echo "| 0.6.0 | ${{ steps.build_0_6_0.outcome }} |";
            echo "| 0.7.0 | ${{ steps.build_0_7_0.outcome }} |";
            echo "| 0.8.0 | ${{ steps.build_0_8_0.outcome }} |";
            echo "| 0.9.0 | ${{ steps.build_0_9_0.outcome }} |";
            echo "| 1.0.0 | ${{ steps.build_1_0_0.outcome }} |";
            echo "| 1.1.0 | ${{ steps.build_1_1_0.outcome }} |";
            echo "| 1.2.0 | ${{ steps.build_1_2_0.outcome }} |";
            echo "";
            echo "## Smoke (runner corrente)";
            echo "OS: ${{ matrix.platform.name }}";
            if [ "${{ runner.os }}" = "Linux" ]; then
              echo "- 1.2.0: ${{ steps.smoke_linux.outcome }}";
              echo "- Tutte le versioni: ${{ steps.smoke_all_linux.outcome }}";
            fi
            if [ "${{ runner.os }}" = "Windows" ]; then
              echo "- 1.2.0: ${{ steps.smoke_windows.outcome }}";
              echo "- Tutte le versioni: ${{ steps.smoke_all_windows.outcome }}";
            fi
            if [ "${{ runner.os }}" = "macOS" ]; then
              echo "- 1.2.0: ${{ steps.smoke_macos.outcome }}";
              echo "- Tutte le versioni: ${{ steps.smoke_all_macos.outcome }}";
            fi
          } >> "$GITHUB_STEP_SUMMARY"