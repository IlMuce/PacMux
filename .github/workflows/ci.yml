name: CI

on:
  push:
    branches: [ConsegnaProgettoCorretto]
  pull_request:
    branches: [main]

defaults:
  run:
    shell: bash

jobs:
  superbuild:
    name: ${{ matrix.platform.name }} ${{ matrix.config.name }}
    runs-on: ${{ matrix.platform.os }}

    strategy:
      fail-fast: false
      matrix:
        platform:
        - { name: Windows VS2022, os: windows-2022 }
        - { name: Windows VS2025, os: windows-2025 }
        - { name: Linux GCC,      os: ubuntu-latest }
        - { name: Linux Clang,    os: ubuntu-latest, flags: -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ }
        - { name: macOS,          os: macos-14 }
        config:
        - { name: Shared, flags: -DBUILD_SHARED_LIBS=TRUE }
        - { name: Static, flags: -DBUILD_SHARED_LIBS=FALSE }

    steps:
      - name: Install Linux Dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libxrandr-dev libxcursor-dev libxi-dev libudev-dev \
            libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev libfreetype-dev \
            xvfb

      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure superbuild
        run: |
          echo "::group::Configure superbuild"
          cmake -B build ${{ matrix.platform.flags }} ${{ matrix.config.flags }}
          echo "::endgroup::"

      # Build each release as a separate step for clear PASS/FAIL and compact logs
      - name: Build PacMux-0.1.0
        id: build_0_1_0
        continue-on-error: true
        run: |
          echo "::group::Build PacMux-0.1.0"
          cmake --build build --config Release --parallel --target PacMux_0_1_0
          echo "::endgroup::"

      - name: Build PacMux-0.2.0
        id: build_0_2_0
        continue-on-error: true
        run: |
          echo "::group::Build PacMux-0.2.0"
          cmake --build build --config Release --parallel --target PacMux_0_2_0
          echo "::endgroup::"

      - name: Build PacMux-0.3.0
        id: build_0_3_0
        continue-on-error: true
        run: |
          echo "::group::Build PacMux-0.3.0"
          cmake --build build --config Release --parallel --target PacMux_0_3_0
          echo "::endgroup::"

      - name: Build PacMux-0.4.0
        id: build_0_4_0
        continue-on-error: true
        run: |
          echo "::group::Build PacMux-0.4.0"
          cmake --build build --config Release --parallel --target PacMux_0_4_0
          echo "::endgroup::"

      - name: Build PacMux-0.5.0
        id: build_0_5_0
        continue-on-error: true
        run: |
          echo "::group::Build PacMux-0.5.0"
          cmake --build build --config Release --parallel --target PacMux_0_5_0
          echo "::endgroup::"

      - name: Build PacMux-0.6.0
        id: build_0_6_0
        continue-on-error: true
        run: |
          echo "::group::Build PacMux-0.6.0"
          cmake --build build --config Release --parallel --target PacMux_0_6_0
          echo "::endgroup::"

      - name: Build PacMux-0.7.0
        id: build_0_7_0
        continue-on-error: true
        run: |
          echo "::group::Build PacMux-0.7.0"
          cmake --build build --config Release --parallel --target PacMux_0_7_0
          echo "::endgroup::"

      - name: Build PacMux-0.8.0
        id: build_0_8_0
        continue-on-error: true
        run: |
          echo "::group::Build PacMux-0.8.0"
          cmake --build build --config Release --parallel --target PacMux_0_8_0
          echo "::endgroup::"

      - name: Build PacMux-0.9.0
        id: build_0_9_0
        continue-on-error: true
        run: |
          echo "::group::Build PacMux-0.9.0"
          cmake --build build --config Release --parallel --target PacMux_0_9_0
          echo "::endgroup::"

      - name: Build PacMux-1.0.0
        id: build_1_0_0
        continue-on-error: true
        run: |
          echo "::group::Build PacMux-1.0.0"
          cmake --build build --config Release --parallel --target PacMux_1_0_0
          echo "::endgroup::"

      - name: Build PacMux-1.1.0
        id: build_1_1_0
        continue-on-error: true
        run: |
          echo "::group::Build PacMux-1.1.0"
          cmake --build build --config Release --parallel --target PacMux_1_1_0
          echo "::endgroup::"

      - name: Build PacMux-1.2.0
        id: build_1_2_0
        continue-on-error: true
        run: |
          echo "::group::Build PacMux-1.2.0"
          cmake --build build --config Release --parallel --target PacMux_1_2_0
          echo "::endgroup::"

      - name: Smoke run 1.2.0 (Linux, 5s)
        id: smoke_linux
        continue-on-error: true
        if: runner.os == 'Linux'
        working-directory: build/PacMux-1.2.0-build
        run: |
          mkdir -p assets && cp -r ../../PacMux-1.2.0/assets/* assets/
          if [ -f PacmanR12 ]; then \
            xvfb-run -a bash -lc 'timeout 5s ./PacmanR12; rc=$?; if [ $rc -eq 0 ]; then echo "Exited too early"; exit 1; elif [ $rc -eq 124 ]; then exit 0; else exit $rc; fi'; \
          fi

      - name: Smoke run 1.2.0 (Windows, 5s)
        id: smoke_windows
        continue-on-error: true
        if: runner.os == 'Windows'
        working-directory: build/PacMux-1.2.0-build/Release
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          New-Item -ItemType Directory -Force -Path assets | Out-Null
          Copy-Item -Recurse -Force ../../../PacMux-1.2.0/assets/* assets/
          $exe = '.\PacmanR12.exe'
          if (-not (Test-Path $exe)) { throw "Eseguibile non trovato: $exe" }
          $p = Start-Process -FilePath $exe -PassThru
          # Attendi massimo 5s: se esce prima => fallisci (probabile crash / DLL)
          Wait-Process -Id $p.Id -Timeout 5 -ErrorAction SilentlyContinue
          if ($p.HasExited) { throw "Il processo Ã¨ terminato prematuramente. ExitCode=$($p.ExitCode)" }
          Stop-Process -Id $p.Id -Force

      - name: Smoke run 1.2.0 (macOS, 5s)
        id: smoke_macos
        continue-on-error: true
        if: runner.os == 'macOS'
        working-directory: build/PacMux-1.2.0-build
        run: |
          mkdir -p assets && cp -r ../../PacMux-1.2.0/assets/* assets/
          if [ -f PacmanR12 ]; then \
            ( ./PacmanR12 & pid=$!; \
              sleep 5; \
              if kill -0 $pid 2>/dev/null; then kill $pid; exit 0; else echo "Exited too early"; exit 1; fi ); \
          fi

      - name: Gate (fail job if any build/smoke failed)
        if: always()
        run: |
          fail=0
          # Collect outcomes for builds
          for o in \
            "${{ steps.build_0_1_0.outcome }}" \
            "${{ steps.build_0_2_0.outcome }}" \
            "${{ steps.build_0_3_0.outcome }}" \
            "${{ steps.build_0_4_0.outcome }}" \
            "${{ steps.build_0_5_0.outcome }}" \
            "${{ steps.build_0_6_0.outcome }}" \
            "${{ steps.build_0_7_0.outcome }}" \
            "${{ steps.build_0_8_0.outcome }}" \
            "${{ steps.build_0_9_0.outcome }}" \
            "${{ steps.build_1_0_0.outcome }}" \
            "${{ steps.build_1_1_0.outcome }}" \
            "${{ steps.build_1_2_0.outcome }}"; do
            if [ "$o" != "success" ]; then fail=1; fi
          done
          # Check smoke outcome for this OS
          if [ "${{ runner.os }}" = "Linux" ]; then
            if [ "${{ steps.smoke_linux.outcome }}" != "success" ]; then fail=1; fi
            if [ "${{ steps.smoke_linux_0_1_0.outcome }}" != "success" ]; then fail=1; fi
          fi
          if [ "${{ runner.os }}" = "Windows" ]; then
            if [ "${{ steps.smoke_windows.outcome }}" != "success" ]; then fail=1; fi
            if [ "${{ steps.smoke_windows_0_1_0.outcome }}" != "success" ]; then fail=1; fi
          fi
          if [ "${{ runner.os }}" = "macOS" ]; then
            if [ "${{ steps.smoke_macos.outcome }}" != "success" ]; then fail=1; fi
            if [ "${{ steps.smoke_macos_0_1_0.outcome }}" != "success" ]; then fail=1; fi
          fi
          if [ $fail -ne 0 ]; then echo "Some builds or smoke run failed"; exit 1; fi

      - name: Summary
        if: always()
        run: |
          {
            echo "## Risultati build";
            echo "Platform: ${{ matrix.platform.name }} | Config: ${{ matrix.config.name }}";
            echo "";
            echo "| Versione | Esito |";
            echo "|---|---|";
            echo "| 0.1.0 | ${{ steps.build_0_1_0.outcome }} |";
            echo "| 0.2.0 | ${{ steps.build_0_2_0.outcome }} |";
            echo "| 0.3.0 | ${{ steps.build_0_3_0.outcome }} |";
            echo "| 0.4.0 | ${{ steps.build_0_4_0.outcome }} |";
            echo "| 0.5.0 | ${{ steps.build_0_5_0.outcome }} |";
            echo "| 0.6.0 | ${{ steps.build_0_6_0.outcome }} |";
            echo "| 0.7.0 | ${{ steps.build_0_7_0.outcome }} |";
            echo "| 0.8.0 | ${{ steps.build_0_8_0.outcome }} |";
            echo "| 0.9.0 | ${{ steps.build_0_9_0.outcome }} |";
            echo "| 1.0.0 | ${{ steps.build_1_0_0.outcome }} |";
            echo "| 1.1.0 | ${{ steps.build_1_1_0.outcome }} |";
            echo "| 1.2.0 | ${{ steps.build_1_2_0.outcome }} |";
          } >> "$GITHUB_STEP_SUMMARY"